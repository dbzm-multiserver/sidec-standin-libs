plugins {
    id 'maven-publish'
    id 'signing'
    id 'java'
}

java {
    withJavadocJar()
    withSourcesJar()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = 'io.github.dbzm-multiserver-oss'
            artifactId = 'standin-starter'
            from components.java
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            pom {
                name = 'dbzm-multiserver standin-starter'
                description = 'Application stand-in switchover controller'
                url = 'https://github.com/dbzm-multiserver/sidec-standin-libs'

                licenses {
                    license {
                        name = 'Apache License'
                        url = 'http://www.apache.org/licenses/'
                    }
                }

                developers {
                    developer {
                        id = 'dbzm.multiserver'
                        name = 'dbzm-multiserver-oss'
                        email = 'dbzm.multiserver@gmail.com'
                    }
                }

                scm {
                    connection = 'scm:git:git://github.com/dbzm-multiserver/sidec-standin-libs.git'
                    developerConnection = 'scm:git:ssh://github.com:dbzm-multiserver/sidec-standin-libs.git'
                    url = 'https://github.com/dbzm-multiserver/sidec-standin-libs'
                }
            }
        }
    }
    repositories {
        maven {
            name = "mavenCentral"
            def releasesRepoUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl

            credentials {
                username = providers.environmentVariable("OSSRH_USERNAME").orNull ?: ""
                password = providers.environmentVariable("OSSRH_PASSWORD").orNull ?: ""
            }
        }
    }
}

signing {
    def signingKey = providers.environmentVariable("SIGNING_KEY").orNull
    def signingPassword = providers.environmentVariable("SIGNING_PASSWORD").orNull
    if (signingKey != null && signingPassword != null) {
        useInMemoryPgpKeys(signingKey, signingPassword)
        sign(publishing.publications.mavenJava)
    } else {
        logger.warn("Signing skipped: missing environment variables")
    }
}

group = "io.github.dbzm-multiserver-oss"
version = "01.002.00"