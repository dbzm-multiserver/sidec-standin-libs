plugins {
    id 'java'
    id 'maven-publish'
}

repositories {
    mavenCentral()
}


dependencies {
    constraints {
        implementation "org.apache.kafka:kafka-clients:$kafka_version"
        implementation "com.fasterxml.jackson.core:jackson-databind:$jackson_version"
        implementation "com.fasterxml.jackson.core:jackson-core:$jackson_version"
        implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jackson_version"
        implementation "ch.qos.logback:logback-classic:$logback_version"
        implementation "ch.qos.logback:logback-core:$logback_version"
        implementation "org.slf4j:slf4j-api:$slf4j_version"
    }
    compileOnly "ch.qos.logback:logback-classic"
    compileOnly "ch.qos.logback:logback-core"

    implementation  "org.apache.kafka:kafka-clients"
    implementation "com.fasterxml.jackson.core:jackson-databind"
    implementation "com.fasterxml.jackson.core:jackson-core"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310"
    implementation "org.slf4j:slf4j-api"

    testImplementation("org.postgresql:postgresql:$postgresql_version")
    testImplementation("org.awaitility:awaitility:$awaitility_version")
    testImplementation("org.testcontainers:testcontainers:$testcontainers_version")
    testImplementation("org.testcontainers:junit-jupiter:$testcontainers_version")
    testImplementation("org.testcontainers:kafka:$testcontainers_version")
    testImplementation("org.assertj:assertj-core:$assertj_core_version")
    testImplementation("org.slf4j:slf4j-reload4j:$slf4j_version")
    testImplementation("org.mockito:mockito-junit-jupiter:$mockito_junit_version")
    testImplementation("org.junit.jupiter:junit-jupiter-params:$junit_version")
    testImplementation("org.junit.jupiter:junit-jupiter-api:$junit_version")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:$junit_version")


}

group = "ru.sbrf.sidec"
version = "$sidec_standin_starter_version"
description = "Sidec application standin core lib"

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

tasks.jar {
    enabled = true
    // Remove `plain` postfix from jar file name
    archiveClassifier.set("")
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"

        showExceptions true
        exceptionFormat "full"
        showCauses true
        showStackTraces true

        showStandardStreams = false
    }
}
bootJar.onlyIf {
    false
}

